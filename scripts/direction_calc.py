# This script is ai generated by Claude Sonnet 4
# It calculates the direction, distance, and degree offsets from latitude/longitude offsets
# if any erros are spotted please add an issue to the repository
# Sord of not trusting AI :)

import math

def calculate_direction(lat_offset_m, lon_offset_m, compass_bearing_deg, base_lat_deg=52.52):
    """
    Calculates bearing, distance, relative direction, and degree offsets from lat/lon offsets.
    
    Args:
        lat_offset_m: Latitude offset in meters (positive = north, negative = south)
        lon_offset_m: Longitude offset in meters (positive = east, negative = west)
        compass_bearing_deg: Current compass bearing in degrees (0° = north)
        base_lat_deg: Reference latitude in degrees (default: Berlin = 52.52°)

    Returns:
        Dictionary with bearing, distance, relative angle, direction, lat_offset_deg, lon_offset_deg
    """

    # Convert meter offsets to degree offsets
    deg_per_meter_lat = 1 / 111320.0
    deg_per_meter_lon = 1 / (111320.0 * math.cos(math.radians(base_lat_deg)))

    lat_offset_deg = lat_offset_m * deg_per_meter_lat
    lon_offset_deg = lon_offset_m * deg_per_meter_lon

    # Compute bearing to target
    bearing_rad = math.atan2(-lon_offset_m, -lat_offset_m)
    bearing_deg = (math.degrees(bearing_rad) + 360) % 360

    # Distance to target
    distance_m = math.hypot(lat_offset_m, lon_offset_m)

    # Relative turn needed
    relative_angle = (bearing_deg - compass_bearing_deg + 360) % 360

    # 8-direction mapping
    octants = [
        "front", "front-right", "right", "back-right",
        "back", "back-left", "left", "front-left"
    ]
    octant_index = int((relative_angle + 22.5) // 45) % 8
    direction = octants[octant_index]

    return {
        "bearing_deg": round(bearing_deg, 1),
        "distance_m": round(distance_m, 2),
        "relative_angle": round(relative_angle, 1),
        "direction": direction,
        "lat_offset_deg": round(lat_offset_deg, 6),
        "lon_offset_deg": round(lon_offset_deg, 6)
    }


# === Example usage ===
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Calculate direction, distance, and degree offsets to a target")
    parser.add_argument("lat_offset", type=float, help="Latitude offset in meters (positive = north, negative = south)")
    parser.add_argument("lon_offset", type=float, help="Longitude offset in meters (positive = east, negative = west)")
    parser.add_argument("compass_bearing", type=float, help="Compass heading in degrees (0 = north)")
    parser.add_argument("--base-lat", type=float, default=52.52, help="Base latitude in degrees (default: 52.52 for Berlin)")

    args = parser.parse_args()

    result = calculate_direction(args.lat_offset, args.lon_offset, args.compass_bearing, args.base_lat)

    print(f"Bearing to target:      {result['bearing_deg']}°")
    print(f"Distance to target:     {result['distance_m']} m")
    print(f"Relative angle:         {result['relative_angle']}°")
    print(f"Suggested movement:     {result['direction']}")
    print(f"Latitude offset (deg):  {result['lat_offset_deg']}°")
    print(f"Longitude offset (deg): {result['lon_offset_deg']}°")
